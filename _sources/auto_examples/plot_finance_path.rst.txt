.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_finance_path.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_finance_path.py:


=======================================================
Lasso path computation on Finance/log1p dataset
=======================================================

The example runs the Celer algorithm on the Finance dataset
which is a large sparse dataset.

Running time is here not compared with the scikit-learn
implementation as it makes the example too long to run.



.. image:: /auto_examples/images/sphx_glr_plot_finance_path_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    *** Warning: this example may take more than 5 minutes to run ***
    Dataset: finance
    Replace is False and data exists, so doing nothing. Use replace==True to re-download the data.
    Starting path computation...
    /home/mathurin/workspace/celer/celer/plot_utils.py:48: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      plt.show(block=False)
    /home/mathurin/workspace/celer/examples/plot_finance_path.py:54: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      plt.show()





|


.. code-block:: default


    import time

    import numpy as np
    import matplotlib.pyplot as plt

    from celer import celer_path
    from celer.datasets import load_libsvm
    from celer.plot_utils import plot_path_hist

    print(__doc__)

    print("*** Warning: this example may take more than 5 minutes to run ***")
    X, y = load_libsvm('finance')

    print("Starting path computation...")
    n_samples = X.shape[0]
    alpha_max = np.max(np.abs(X.T.dot(y))) / n_samples

    # construct fine or coarse grid of regularization parameters
    fine = False
    n_alphas = 100 if fine else 10
    alphas = alpha_max * np.logspace(0, -2, n_alphas)

    gap_freq = 10
    prune = 0
    verbose = 0
    verbose_inner = 0

    tols = [1e-2, 1e-4, 1e-6]
    results = np.zeros([1, len(tols)])
    for tol_ix, tol in enumerate(tols):
        t0 = time.time()
        res = celer_path(X, y, 'lasso', alphas=alphas, max_iter=100, gap_freq=gap_freq,
                         p0=100, verbose=verbose, verbose_inner=verbose_inner,
                         tol=tol, prune=prune, return_thetas=True)
        results[0, tol_ix] = time.time() - t0
        _, coefs, gaps, thetas = res

    labels = [r"\sc{Celer}"]
    figsize = (7, 4)
    fig = plot_path_hist(results, labels, tols, figsize, ylim=None)
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  37.071 seconds)


.. _sphx_glr_download_auto_examples_plot_finance_path.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_finance_path.py <plot_finance_path.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_finance_path.ipynb <plot_finance_path.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
