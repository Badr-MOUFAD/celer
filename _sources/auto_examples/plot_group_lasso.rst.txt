.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_group_lasso.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_group_lasso.py:


=============================================
Run GroupLasso for structured sparse recovery
=============================================

The example runs the GroupLasso scikit-learn like estimators.



.. image:: /auto_examples/images/sphx_glr_plot_group_lasso_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    /home/mathurin/workspace/celer/examples/plot_group_lasso.py:45: UserWarning: In Matplotlib 3.3 individual lines on a stem plot will be added as a LineCollection instead of individual lines. This significantly improves the performance of a stem plot. To remove this warning and switch to the new behaviour, set the "use_line_collection" keyword argument to True.
      m, s, _ = plt.stem(w_true, label=r"true regression coefficients")
    /home/mathurin/workspace/celer/examples/plot_group_lasso.py:47: UserWarning: In Matplotlib 3.3 individual lines on a stem plot will be added as a LineCollection instead of individual lines. This significantly improves the performance of a stem plot. To remove this warning and switch to the new behaviour, set the "use_line_collection" keyword argument to True.
      markerfmt='x')
    /home/mathurin/workspace/celer/examples/plot_group_lasso.py:51: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      plt.show(block=False)






|


.. code-block:: default


    import numpy as np
    import matplotlib.pyplot as plt

    from sklearn.utils import check_random_state

    from celer import GroupLasso
    from celer.plot_utils import configure_plt

    print(__doc__)
    configure_plt()

    # Generating X and y data

    n_samples, n_features = 30, 50
    rng = check_random_state(0)
    X = rng.randn(n_samples, n_features)


    # Create true regression coefficients with 3 groups of 5 non-zero values

    w_true = np.zeros(n_features)
    w_true[:5] = 1
    w_true[20:25] = -2
    w_true[40:45] = 1
    y = X @ w_true + rng.randn(n_samples)


    # Fit an adapted GroupLasso model

    groups = 5  # groups are contiguous and of size 5
    clf = GroupLasso(groups=groups, alpha=1.1)
    clf.fit(X, y)

    # Display results

    fig = plt.figure(figsize=(13, 4))
    m, s, _ = plt.stem(w_true, label=r"true regression coefficients")
    m, s, _ = plt.stem(clf.coef_, label=r"estimated regression coefficients",
                       markerfmt='x')
    plt.setp([m, s], color='#ff7f0e')
    plt.xlabel("feature index")
    plt.legend()
    plt.show(block=False)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.155 seconds)


.. _sphx_glr_download_auto_examples_plot_group_lasso.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_group_lasso.py <plot_group_lasso.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_group_lasso.ipynb <plot_group_lasso.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
