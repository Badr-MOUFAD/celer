

.. _sphx_glr_auto_examples_plot_leukemia_path.py:


=======================================================
Lasso path computation on Leukemia dataset
=======================================================

The example runs the Celer algorithm on the Leukemia
dataset which is dense dataset.

Running time is compared with the scikit-learn implementation.




.. image:: /auto_examples/images/sphx_glr_plot_leukemia_path_001.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

    Loading data...
    Starting path computation...
    Celer time: 0.12 s
    Celer time: 0.24 s
    Celer time: 0.44 s
    Celer time: 0.64 s




|


.. code-block:: python


    import time

    import numpy as np
    import matplotlib.pyplot as plt

    from sklearn.linear_model import lasso_path
    from sklearn.datasets import fetch_mldata

    from celer import celer_path
    from celer.plot_utils import plot_path_hist

    print(__doc__)

    print("Loading data...")
    dataset = fetch_mldata("leukemia")
    X = np.asfortranarray(dataset.data.astype(float))
    y = dataset.target.astype(float)
    n_samples = len(y)

    y -= np.mean(y)
    y /= np.std(y)

    print("Starting path computation...")
    alpha_max = np.max(np.abs(X.T.dot(y))) / n_samples

    fine = True  # fine or coarse grid
    n_alphas = 100 if fine else 10
    alphas = alpha_max * np.logspace(0, -2, n_alphas)

    gap_freq = 10
    prune = 1
    verbose = 0
    verbose_inner = 0
    tols = [1e-2, 1e-4, 1e-6, 1e-8]
    results = np.zeros([2, len(tols)])
    for tol_ix, tol in enumerate(tols):
        t0 = time.time()
        res = celer_path(X, y, alphas=alphas, max_iter=100, gap_freq=gap_freq,
                         p0=100, verbose=verbose, verbose_inner=verbose_inner,
                         tol=tol, prune=prune, return_thetas=True)
        results[0, tol_ix] = time.time() - t0
        print('Celer time: %.2f s' % results[0, tol_ix])
        _, coefs, gaps, thetas = res

        t0 = time.time()
        _, coefs, dual_gaps = lasso_path(X, y, tol=tol, alphas=alphas)
        results[1, tol_ix] = time.time() - t0
        coefs = coefs.T

    labels = [r"\sc{Celer}", "scikit-learn"]
    figsize = (7, 4)
    fig = plot_path_hist(results, labels, tols, figsize, ylim=None)
    plt.show()

**Total running time of the script:** ( 0 minutes  22.327 seconds)



.. only :: html

 .. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_leukemia_path.py <plot_leukemia_path.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_leukemia_path.ipynb <plot_leukemia_path.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
